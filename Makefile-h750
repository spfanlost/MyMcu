##########################################################################################################################
# File automatically-generated by tool
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ------------------------------------------------

######################################
# target
######################################
TARGET = h50vbt6

ROOT_PATH = src
DRIVER_PATH = $(ROOT_PATH)/library/STM32H7xx_HAL_Driver

# C sources
C_SOURCES =  \
$(ROOT_PATH)/app/myh750_main.c \
$(ROOT_PATH)/msic/cmdline.c \
$(ROOT_PATH)/msic/retarget.c \
$(ROOT_PATH)/msic/task.c \
$(ROOT_PATH)/mcu/mcu_isr.c  \
$(ROOT_PATH)/cmsis/Device/STM32H7xx/Source/Templates/system_stm32h7xx.c  \
$(DRIVER_PATH)/Src/stm32h7xx_ll_exti.c \
$(DRIVER_PATH)/Src/stm32h7xx_ll_gpio.c \
$(DRIVER_PATH)/Src/stm32h7xx_ll_usart.c \
$(DRIVER_PATH)/Src/stm32h7xx_ll_rcc.c \
$(DRIVER_PATH)/Src/stm32h7xx_ll_dma.c \
$(DRIVER_PATH)/Src/stm32h7xx_ll_utils.c \
$(DRIVER_PATH)/Src/stm32h7xx_ll_pwr.c


# ASM sources
ASM_SOURCES =  \
$(ROOT_PATH)/cpu/startup_stm32h750xx.s

# cpu
CPU = -mcpu=cortex-m7

# fpu
FPU = -mfpu=fpv5-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_FULL_LL_DRIVER \
-DHSE_VALUE=8000000 \
-DHSE_STARTUP_TIMEOUT=100 \
-DLSE_STARTUP_TIMEOUT=5000 \
-DLSE_VALUE=32768 \
-DEXTERNAL_CLOCK_VALUE=12288000 \
-DHSI_VALUE=64000000 \
-DLSI_VALUE=32000 \
-DVDD_VALUE=3300 \
-DSTM32H750xx


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-I$(ROOT_PATH)/app \
-I$(DRIVER_PATH)/Inc \
-I$(ROOT_PATH)/cmsis/Include  \
-I$(ROOT_PATH)/cmsis/Device/STM32H7xx/Include  \
-I$(ROOT_PATH)/msic  \
-I$(ROOT_PATH)/mcu

# link script
LDSCRIPT = \
$(ROOT_PATH)/cpu/STM32H750VBTx_FLASH.ld

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og

# Build path
BUILD_DIR = build

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# compiler
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# $@  表示目标文件
# $^  表示所有的依赖文件
# $<  表示第一个依赖文件
# $?  表示比目标还要新的依赖文件列表
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	@echo "Compiling $<"
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@echo "Assembling $<"
	@$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@echo "Linking $@"
	@$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@echo "Size:"
	@$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
